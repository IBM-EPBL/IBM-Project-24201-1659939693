# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MWbmyKxFghNfs-8xN7T1LtelDMFWU0IB

***Exercises***


Answer the questions or complete the tasks outlined in bold below, use the specific method described if applicable.

What is 7 to the power of 4?
"""

print(7*7*7*7)

"""Split this string:

s = "Hi there Sam!"

into a list.
"""

s=['Hi','there','dad!']
s

"""Given the variables:

planet = "Earth"
diameter = 12742

Use .format() to print the following string:

The diameter of Earth is 12742 kilometers.
"""

planet="Earth"
diameter="The diameter of {} is 12742 kilometers".format(planet)
print(diameter)

"""Given this nested list, use indexing to grab the word "hello"
"""

lst = [1,2,[3,4],[5,[100,200,['hello']],23,11],1,7]
lst[3][1][2]

"""Given this nest dictionary grab the word "hello". Be prepared, this will be annoying/tricky"""

d = {'k1':[1,2,3,{'tricky':['oh','man','inception',{'target':[1,2,3,'hello']}]}]}
d["k1"][3]["tricky"][3]["target"][3]

"""What is the main difference between a tuple and a list?

ANS : The main differences between lists and tuples are,Lists are enclosed in brackets([]) and their elements and size can be changed,while tuples are enclosed in parentheses() and cannot be updated.Tuples can be thought of as read only lists.

Create a function that grabs the email website domain from a string in a form:

  user@domain.com

So for example, passing "user@domain.com" would return: domain.com
"""

def domainGet(email):
    return email.split('@')[-1]

domainGet('user@domain.com')

"""Create a basic function that returns True if the word 'dog' is contained in the input string. Don't worry about edge cases like a punctuation being attached to the word dog, but do account for capitalization."""

def findDog(st):
    if 'dog' in st.lower():
        print("True")
    else:
        print("False")

st = "Is there a dog here?"
findDog(st)

"""Create a function that counts the number of times the word "dog" occurs in a string. Again ignore edge cases."""

value = 'This dog runs faster than the other dog dude!';

def countdogs(value):
    count = 0
    for word in value.lower().split():
        if word == 'dog' or word == 'dogs':
            count = count + 1
            print(count)

countdogs(value)

"""Problem

You are driving a little too fast, and a police officer stops you. Write a function to return one of 3 possible results: "No ticket", "Small ticket", or "Big Ticket". If your speed is 60 or less, the result is "No Ticket". If speed is between 61 and 80 inclusive, the result is "Small Ticket". If speed is 81 or more, the result is "Big Ticket". Unless it is your birthday (encoded as a boolean value in the parameters of the function) -- on your birthday, your speed can be 5 higher in all cases.
"""

def caught_speeding(speed, is_birthday):
    
    if is_birthday:
        speeding = speed - 5
    else:
        speeding = speed
    
    if speeding > 80:
        return 'Big Ticket'
    elif speeding > 60:
        return 'Small Ticket'
    else:
        return 'No Ticket'

caught_speeding(81,False)

speed="Your speed is more than 81"
caught_speeding(81,True)

"""
Create an employee list with basic salary values(at least 5 values for 5 employees) and using a for loop retreive each employee salary and calculate total salary expenditure."""

employee_names = ["vvv", "aaa", "iii", "sss", "hhh"]
employee_salaries = {}
for employee in employee_names:
    while True:  
        try:
            employee_salaries[employee] = int(input(f"Enter {employee}'s salary: "))
            break
        except ValueError:
            print("Invalid input")
print(employee_salaries)
total = sum(employee_salaries.values())
print(total)

"""Create two dictionaries in Python:

First one to contain fields as Empid, Empname, Basicpay

Second dictionary to contain fields as DeptName, DeptId.

Combine both dictionaries.
"""

dict_1={'Empid':'1234','Empname':'vvv','Basicpay':'15000'}
dict_2={'DeptName':'CSE','DeptId':'104'}
dict_1.update(dict_2)
dict_1

